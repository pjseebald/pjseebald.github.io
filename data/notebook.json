{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "<table style=\"border: none\" align=\"left\">\n",
    "   <tr style=\"border: none\">\n",
    "      <th style=\"border: none\"><font face=\"verdana\" size=\"5\" color=\"black\"><b>Mortgage Default Machine Learning Model</b></th>\n",
    "      <th style=\"border: none\"><img src=\"https://github.com/pmservice/customer-satisfaction-prediction/blob/master/app/static/images/ml_icon_gray.png?raw=true\" alt=\"Watson Machine Learning icon\" height=\"40\" width=\"40\"></th>\n",
    "   </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "This notebook walks you through these steps:\n",
    "- Access the data\n",
    "- Cleanse data for analysis\n",
    "- Explore data\n",
    "- Build a classification model\n",
    "- Save the model in the ML repository with associated meta data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Step 1: Load Data as Spark Dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Read the three Mortgage files - Insert them as SPARK Dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'df2 = None\\ndataSet = dsx_core_utils.get_remote_data_set_info(\\'m_default\\')\\ndataSource = dsx_core_utils.get_data_source_info(dataSet[\\'datasource\\'])\\n# Load JDBC data to Spark dataframe\\ndbTableOrQuery = (dataSet[\\'schema\\'] + \\'.\\' if(len(dataSet[\\'schema\\'].strip()) != 0) else \\'\\') + dataSet[\\'table\\']\\ndf2 = sparkSession.read.format(\"jdbc\").option(\"url\", dataSource[\\'URL\\']).option(\"dbtable\",dbTableOrQuery).option(\"user\",dataSource[\\'user\\']).option(\"password\",dataSource[\\'password\\']).load()\\n\\n# Add asset from remote connection\\ndf3 = None\\ndataSet = dsx_core_utils.get_remote_data_set_info(\\'m_property\\')\\ndataSource = dsx_core_utils.get_data_source_info(dataSet[\\'datasource\\'])\\n# Load JDBC data to Spark dataframe\\ndbTableOrQuery = (dataSet[\\'schema\\'] + \\'.\\' if(len(dataSet[\\'schema\\'].strip()) != 0) else \\'\\') + dataSet[\\'table\\']\\ndf3 = sparkSession.read.format(\"jdbc\").option(\"url\", dataSource[\\'URL\\']).option(\"dbtable\",dbTableOrQuery).option(\"user\",dataSource[\\'user\\']).option(\"password\",dataSource[\\'password\\']).load()'"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import dsx_core_utils, requests, os, io\n",
    "from pyspark.sql import SparkSession\n",
    "# Add asset from remote connection\n",
    "df = None\n",
    "dataSet = dsx_core_utils.get_remote_data_set_info('MORTGAGE_JOIN')\n",
    "dataSource = dsx_core_utils.get_data_source_info(dataSet['datasource'])\n",
    "sparkSession = SparkSession(sc).builder.getOrCreate()\n",
    "# Load JDBC data to Spark dataframe\n",
    "dbTableOrQuery = (dataSet['schema'] + '.' if(len(dataSet['schema'].strip()) != 0) else '') + dataSet['table']\n",
    "df = sparkSession.read.format(\"jdbc\").option(\"url\", dataSource['URL']).option(\"dbtable\",dbTableOrQuery).option(\"user\",dataSource['user']).option(\"password\",dataSource['password']).load()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "merged = df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DataFrame[ID: int, SALE_PRICE: int, LOCATION: int, INCOME: int, APPLIED_ONLINE: string, RESIDENCE: string, YRS_CURRENT_ADD: int, YRS_CURRENT_EMP: int, NO_OF_CARDS: int, CARD_DEBT: int, CURRENT_LOANS: int, LOAN_AMOUNT: int, MORTGAGE_DEFAULT: string]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataframe contains these fields:\n",
      "['ID', 'SALE_PRICE', 'LOCATION', 'INCOME', 'APPLIED_ONLINE', 'RESIDENCE', 'YRS_CURRENT_ADD', 'YRS_CURRENT_EMP', 'NO_OF_CARDS', 'CARD_DEBT', 'CURRENT_LOANS', 'LOAN_AMOUNT', 'MORTGAGE_DEFAULT']\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print \"Dataframe contains these fields:\"\n",
    "print merged.schema.names\n",
    "print \"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "View the data within the three data frames created above. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+----------+--------+------+--------------+---------+---------------+---------------+-----------+---------+-------------+-----------+----------------+\n",
      "|    ID|SALE_PRICE|LOCATION|INCOME|APPLIED_ONLINE|RESIDENCE|YRS_CURRENT_ADD|YRS_CURRENT_EMP|NO_OF_CARDS|CARD_DEBT|CURRENT_LOANS|LOAN_AMOUNT|MORTGAGE_DEFAULT|\n",
      "+------+----------+--------+------+--------------+---------+---------------+---------------+-----------+---------+-------------+-----------+----------------+\n",
      "|100272|    180000|     130| 43593|             Y|        O|             13|              0|          1|     2315|            0|      12820|               N|\n",
      "|100273|    145000|     100| 45706|             Y|        O|             17|             16|          2|      373|            1|       7275|               Y|\n",
      "|100280|    170000|     100| 44202|             Y|        O|              8|              0|          2|      748|            0|      10455|               N|\n",
      "|100283|    259000|     100| 43800|             Y|        O|              0|              4|          2|      725|            0|       7340|               N|\n",
      "|100292|     95000|     101| 56087|             N|        P|             27|             18|          1|     4818|            1|       8910|               N|\n",
      "+------+----------+--------+------+--------------+---------+---------------+---------------+-----------+---------+-------------+-----------+----------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "merged.show(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Step 2: Merge Files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>SALE_PRICE</th>\n",
       "      <th>LOCATION</th>\n",
       "      <th>INCOME</th>\n",
       "      <th>APPLIED_ONLINE</th>\n",
       "      <th>RESIDENCE</th>\n",
       "      <th>YRS_CURRENT_ADD</th>\n",
       "      <th>YRS_CURRENT_EMP</th>\n",
       "      <th>NO_OF_CARDS</th>\n",
       "      <th>CARD_DEBT</th>\n",
       "      <th>CURRENT_LOANS</th>\n",
       "      <th>LOAN_AMOUNT</th>\n",
       "      <th>MORTGAGE_DEFAULT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100272</td>\n",
       "      <td>180000</td>\n",
       "      <td>130</td>\n",
       "      <td>43593</td>\n",
       "      <td>Y</td>\n",
       "      <td>O</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2315</td>\n",
       "      <td>0</td>\n",
       "      <td>12820</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100273</td>\n",
       "      <td>145000</td>\n",
       "      <td>100</td>\n",
       "      <td>45706</td>\n",
       "      <td>Y</td>\n",
       "      <td>O</td>\n",
       "      <td>17</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>373</td>\n",
       "      <td>1</td>\n",
       "      <td>7275</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100280</td>\n",
       "      <td>170000</td>\n",
       "      <td>100</td>\n",
       "      <td>44202</td>\n",
       "      <td>Y</td>\n",
       "      <td>O</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>748</td>\n",
       "      <td>0</td>\n",
       "      <td>10455</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100283</td>\n",
       "      <td>259000</td>\n",
       "      <td>100</td>\n",
       "      <td>43800</td>\n",
       "      <td>Y</td>\n",
       "      <td>O</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>725</td>\n",
       "      <td>0</td>\n",
       "      <td>7340</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100292</td>\n",
       "      <td>95000</td>\n",
       "      <td>101</td>\n",
       "      <td>56087</td>\n",
       "      <td>N</td>\n",
       "      <td>P</td>\n",
       "      <td>27</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>4818</td>\n",
       "      <td>1</td>\n",
       "      <td>8910</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       ID  SALE_PRICE  LOCATION  INCOME APPLIED_ONLINE RESIDENCE  \\\n",
       "0  100272      180000       130   43593              Y         O   \n",
       "1  100273      145000       100   45706              Y         O   \n",
       "2  100280      170000       100   44202              Y         O   \n",
       "3  100283      259000       100   43800              Y         O   \n",
       "4  100292       95000       101   56087              N         P   \n",
       "\n",
       "   YRS_CURRENT_ADD  YRS_CURRENT_EMP  NO_OF_CARDS  CARD_DEBT  CURRENT_LOANS  \\\n",
       "0               13                0            1       2315              0   \n",
       "1               17               16            2        373              1   \n",
       "2                8                0            2        748              0   \n",
       "3                0                4            2        725              0   \n",
       "4               27               18            1       4818              1   \n",
       "\n",
       "   LOAN_AMOUNT MORTGAGE_DEFAULT  \n",
       "0        12820                N  \n",
       "1         7275                Y  \n",
       "2        10455                N  \n",
       "3         7340                N  \n",
       "4         8910                N  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Preview 5 rows in pandas\n",
    "merged.toPandas().head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Step 3: Simple Data Preparation - Rename some columns and ensure correct data types \n",
    "This step is to remove spaces from columns names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>Location</th>\n",
       "      <th>Income</th>\n",
       "      <th>AppliedOnline</th>\n",
       "      <th>Residence</th>\n",
       "      <th>YearCurrentAddress</th>\n",
       "      <th>YearsCurrentEmployer</th>\n",
       "      <th>NumberOfCards</th>\n",
       "      <th>CCDebt</th>\n",
       "      <th>Loans</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>MortgageDefault</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100272</td>\n",
       "      <td>180000</td>\n",
       "      <td>130</td>\n",
       "      <td>43593</td>\n",
       "      <td>Y</td>\n",
       "      <td>O</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2315</td>\n",
       "      <td>0</td>\n",
       "      <td>12820</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100273</td>\n",
       "      <td>145000</td>\n",
       "      <td>100</td>\n",
       "      <td>45706</td>\n",
       "      <td>Y</td>\n",
       "      <td>O</td>\n",
       "      <td>17</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>373</td>\n",
       "      <td>1</td>\n",
       "      <td>7275</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100280</td>\n",
       "      <td>170000</td>\n",
       "      <td>100</td>\n",
       "      <td>44202</td>\n",
       "      <td>Y</td>\n",
       "      <td>O</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>748</td>\n",
       "      <td>0</td>\n",
       "      <td>10455</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       ID  SalePrice  Location  Income AppliedOnline Residence  \\\n",
       "0  100272     180000       130   43593             Y         O   \n",
       "1  100273     145000       100   45706             Y         O   \n",
       "2  100280     170000       100   44202             Y         O   \n",
       "\n",
       "   YearCurrentAddress  YearsCurrentEmployer  NumberOfCards  CCDebt  Loans  \\\n",
       "0                  13                     0              1    2315      0   \n",
       "1                  17                    16              2     373      1   \n",
       "2                   8                     0              2     748      0   \n",
       "\n",
       "   LoanAmount MortgageDefault  \n",
       "0       12820               N  \n",
       "1        7275               Y  \n",
       "2       10455               N  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged = merged.withColumnRenamed(\"INCOME\", \"Income\").withColumnRenamed(\"APPLIED_ONLINE\", \"AppliedOnline\").withColumnRenamed(\"RESIDENCE\", \"Residence\")\\\n",
    "                .withColumnRenamed(\"YRS_CURRENT_ADD\", \"YearCurrentAddress\").withColumnRenamed(\"YRS_CURRENT_EMP\",\"YearsCurrentEmployer\")\\\n",
    "                .withColumnRenamed(\"NO_OF_CARDS\",\"NumberOfCards\").withColumnRenamed(\"CARD_DEBT\",\"CCDebt\").withColumnRenamed(\"CURRENT_LOANS\", \"Loans\")\\\n",
    "                .withColumnRenamed(\"LOAN_AMOUNT\", \"LoanAmount\").withColumnRenamed(\"SALE_PRICE\", \"SalePrice\").withColumnRenamed(\"LOCATION\", \"Location\")\\\n",
    "                .withColumnRenamed(\"MORTGAGE_DEFAULT\", \"MortgageDefault\")\n",
    "merged.toPandas().head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Check data types and re-cast numeric fields to **Integers**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('ID', 'int'),\n",
       " ('SalePrice', 'int'),\n",
       " ('Location', 'int'),\n",
       " ('Income', 'int'),\n",
       " ('AppliedOnline', 'string'),\n",
       " ('Residence', 'string'),\n",
       " ('YearCurrentAddress', 'int'),\n",
       " ('YearsCurrentEmployer', 'int'),\n",
       " ('NumberOfCards', 'int'),\n",
       " ('CCDebt', 'int'),\n",
       " ('Loans', 'int'),\n",
       " ('LoanAmount', 'int'),\n",
       " ('MortgageDefault', 'string')]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('ID', 'int'),\n",
       " ('Income', 'int'),\n",
       " ('AppliedOnline', 'string'),\n",
       " ('Residence', 'string'),\n",
       " ('YearCurrentAddress', 'int'),\n",
       " ('YearsCurrentEmployer', 'int'),\n",
       " ('NumberOfCards', 'int'),\n",
       " ('CCDebt', 'int'),\n",
       " ('Loans', 'int'),\n",
       " ('LoanAmount', 'int'),\n",
       " ('SalePrice', 'int'),\n",
       " ('Location', 'int'),\n",
       " ('MortgageDefault', 'string')]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged = merged.select(merged.ID.cast(\"integer\"),merged.Income.cast('integer'),merged.AppliedOnline,merged.Residence,\\\n",
    "                   merged.YearCurrentAddress.cast('integer'),merged.YearsCurrentEmployer.cast('integer'),\\\n",
    "                   merged.NumberOfCards.cast('integer'),merged.CCDebt.cast('integer'),merged.Loans.cast('integer'),\\\n",
    "                   merged.LoanAmount.cast('integer'),merged.SalePrice,merged.Location,merged.MortgageDefault)\n",
    "merged.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Step 4: Data Exploration\n",
    "\n",
    "1) Obtain some data shape summaries in terms of number of fields and records <br>\n",
    "2) Perform some exploratory analysis of distributions, scatterplots using two different graphics packages\n",
    "\n",
    "#### Feel free to play around with the charts to explore other features that are in the data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 419 records and 13 fields in the dataset.\n"
     ]
    }
   ],
   "source": [
    "print \"There are \" + str(merged.count()) + \" records and \" + str(len(merged.columns)) + \" fields in the dataset.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<!--\n",
       "  ~ Copyright (c) 2015 IBM Corporation and others.\n",
       "  ~\n",
       "  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n",
       "  ~ You may not use this file except in compliance with the License.\n",
       "  ~ You may obtain a copy of the License at\n",
       "  ~\n",
       "  ~     http://www.apache.org/licenses/LICENSE-2.0\n",
       "  ~\n",
       "  ~ Unless required by applicable law or agreed to in writing, software\n",
       "  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n",
       "  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
       "  ~ See the License for the specific language governing permissions and\n",
       "  ~ limitations under the License.\n",
       "  -->\n",
       "\n",
       "\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"/dsx-jupyter/ibmdsxuser-1106/1541093266917/nbextensions/brunel_ext/brunel.2.3.css\">\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"/dsx-jupyter/ibmdsxuser-1106/1541093266917/nbextensions/brunel_ext/sumoselect.css\">\n",
       "\n",
       "<style>\n",
       "    \n",
       "</style>\n",
       "\n",
       "<div id=\"controlsid79c75f18-deba-11e8-b568-ce419921e9d1\" class=\"brunel\"/>\n",
       "<svg id=\"visid79c75bbc-deba-11e8-b568-ce419921e9d1\" width=\"1100\" height=\"400\"></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "/*\n",
       " * Copyright (c) 2015 IBM Corporation and others.\n",
       " *\n",
       " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
       " * You may not use this file except in compliance with the License.\n",
       " * You may obtain a copy of the License at\n",
       " *\n",
       " *     http://www.apache.org/licenses/LICENSE-2.0\n",
       " *\n",
       " * Unless required by applicable law or agreed to in writing, software\n",
       " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
       " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
       " * See the License for the specific language governing permissions and\n",
       " * limitations under the License.\n",
       " */\n",
       "\n",
       "require.config({\n",
       "    waitSeconds: 60,\n",
       "    paths: {\n",
       "        'd3': '//cdnjs.cloudflare.com/ajax/libs/d3/4.2.1/d3.min',\n",
       "        'topojson': '//cdnjs.cloudflare.com/ajax/libs/topojson/1.6.20/topojson.min',\n",
       "        'brunel' : '/dsx-jupyter/ibmdsxuser-1106/1541093266917/nbextensions/brunel_ext/brunel.2.3.min',\n",
       "        'brunelControls' : '/dsx-jupyter/ibmdsxuser-1106/1541093266917/nbextensions/brunel_ext/brunel.controls.2.3.min'\n",
       "    },\n",
       "    shim: {\n",
       "       'brunel' : {\n",
       "            exports: 'BrunelD3',\n",
       "            deps: ['d3', 'topojson'],\n",
       "            init: function() {\n",
       "               return {\n",
       "                 BrunelD3 : BrunelD3,\n",
       "                 BrunelData : BrunelData\n",
       "              }\n",
       "            }\n",
       "        },\n",
       "       'brunelControls' : {\n",
       "            exports: 'BrunelEventHandlers',\n",
       "            init: function() {\n",
       "               return {\n",
       "                 BrunelEventHandlers: BrunelEventHandlers,\n",
       "                 BrunelJQueryControlFactory: BrunelJQueryControlFactory\n",
       "              }\n",
       "            }\n",
       "        }\n",
       "\n",
       "    }\n",
       "\n",
       "});\n",
       "\n",
       "require([\"d3\"], function(d3) {\n",
       "    require([\"brunel\", \"brunelControls\"], function(brunel, brunelControls) {\n",
       "        function  BrunelVis(visId) {\n",
       "  \"use strict\";                                                                       // strict mode\n",
       "  var datasets = [],                                      // array of datasets for the original data\n",
       "      pre = function(d, i) { return d },                         // default pre-process does nothing\n",
       "      post = function(d, i) { return d },                       // default post-process does nothing\n",
       "      transitionTime = 200,                                        // transition time for animations\n",
       "      charts = [],                                                       // the charts in the system\n",
       "      vis = d3.select('#' + visId).attr('class', 'brunel');                     // the SVG container\n",
       "\n",
       "  BrunelD3.addDefinitions(vis);                                   // ensure standard symbols present\n",
       "\n",
       "  // Define chart #1 in the visualization //////////////////////////////////////////////////////////\n",
       "\n",
       "  charts[0] = function(parentNode, filterRows) {\n",
       "    var geom = BrunelD3.geometry(parentNode || vis.node(), 0, 0, 1, 0.5, 5, 76, 37, 118),\n",
       "      elements = [];                                              // array of elements in this chart\n",
       "\n",
       "    // Define groups for the chart parts ///////////////////////////////////////////////////////////\n",
       "\n",
       "    var chart =  vis.append('g').attr('class', 'chart1')\n",
       "      .attr('transform','translate(' + geom.chart_left + ',' + geom.chart_top + ')');\n",
       "    var overlay = chart.append('g').attr('class', 'element').attr('class', 'overlay');\n",
       "    var zoom = d3.zoom().scaleExtent([1/3,3]);\n",
       "    var zoomNode = overlay.append('rect').attr('class', 'overlay')\n",
       "      .attr('x', geom.inner_left).attr('y', geom.inner_top)\n",
       "      .attr('width', geom.inner_rawWidth).attr('height', geom.inner_rawHeight)\n",
       "      .style('cursor', 'move').call(zoom)\n",
       "      .node();\n",
       "    zoomNode.__zoom = d3.zoomIdentity;\n",
       "    chart.append('rect').attr('class', 'background').attr('width', geom.chart_right-geom.chart_left).attr('height', geom.chart_bottom-geom.chart_top);\n",
       "    var interior = chart.append('g').attr('class', 'interior zoomNone')\n",
       "      .attr('transform','translate(' + geom.inner_left + ',' + geom.inner_top + ')')\n",
       "      .attr('clip-path', 'url(#clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart1_inner)');\n",
       "    interior.append('rect').attr('class', 'inner').attr('width', geom.inner_width).attr('height', geom.inner_height);\n",
       "    var gridGroup = interior.append('g').attr('class', 'grid');\n",
       "    var axes = chart.append('g').attr('class', 'axis')\n",
       "      .attr('transform','translate(' + geom.inner_left + ',' + geom.inner_top + ')');\n",
       "    var legends = chart.append('g').attr('class', 'legend')\n",
       "      .attr('transform','translate(' + (geom.chart_right-geom.chart_left - 3) + ',' + 0 + ')');\n",
       "    vis.append('clipPath').attr('id', 'clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart1_inner').append('rect')\n",
       "      .attr('x', 0).attr('y', 0)\n",
       "      .attr('width', geom.inner_rawWidth+1).attr('height', geom.inner_rawHeight+1);\n",
       "\n",
       "    // Scales //////////////////////////////////////////////////////////////////////////////////////\n",
       "\n",
       "    var scale_x = d3.scalePoint().padding(0.5)\n",
       "      .domain(['L', 'O', 'P', 'S'])\n",
       "      .range([0, geom.inner_width]);\n",
       "    var scale_inner = d3.scaleLinear().domain([0,1])\n",
       "      .range([-0.5, 0.5]);\n",
       "    var scale_y = d3.scaleLinear().domain([0, 8000000.8])\n",
       "      .range([geom.inner_height, 0]);\n",
       "    var base_scales = [scale_x, scale_y];                           // untransformed original scales\n",
       "\n",
       "    // Axes ////////////////////////////////////////////////////////////////////////////////////////\n",
       "\n",
       "    axes.append('g').attr('class', 'x axis')\n",
       "      .attr('transform','translate(0,' + geom.inner_rawHeight + ')')\n",
       "      .attr('clip-path', 'url(#clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart1_haxis)');\n",
       "    vis.append('clipPath').attr('id', 'clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart1_haxis').append('polyline')\n",
       "      .attr('points', '-1,-1000, -1,-1 -5,5, -1000,5, -100,1000, 10000,1000 10000,-1000');\n",
       "    axes.select('g.axis.x').append('text').attr('class', 'title').text('Residence').style('text-anchor', 'middle')\n",
       "      .attr('x',geom.inner_rawWidth/2)\n",
       "      .attr('y', geom.inner_bottom - 2.0).attr('dy','-0.27em');\n",
       "    axes.append('g').attr('class', 'y axis')\n",
       "      .attr('clip-path', 'url(#clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart1_vaxis)');\n",
       "    vis.append('clipPath').attr('id', 'clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart1_vaxis').append('polyline')\n",
       "      .attr('points', '-1000,-10000, 10000,-10000, 10000,' + (geom.inner_rawHeight+1) + ', -1,' + (geom.inner_rawHeight+1) + ', -1,' + (geom.inner_rawHeight+5) + ', -1000,' + (geom.inner_rawHeight+5) );\n",
       "    axes.select('g.axis.y').append('text').attr('class', 'title').text('Income').style('text-anchor', 'middle')\n",
       "      .attr('x',-geom.inner_rawHeight/2)\n",
       "      .attr('y', 4-geom.inner_left).attr('dy', '0.7em').attr('transform', 'rotate(270)');\n",
       "\n",
       "    var axis_bottom = d3.axisBottom(scale_x).ticks(Math.min(10, Math.round(geom.inner_width / 16.5)));\n",
       "    var axis_left = d3.axisLeft(scale_y).ticks(Math.min(10, Math.round(geom.inner_width / 20)), 's');\n",
       "\n",
       "    function buildAxes(time) {\n",
       "      axis_bottom.tickValues(BrunelD3.filterTicks(scale_x))\n",
       "      var axis_x = axes.select('g.axis.x');\n",
       "      BrunelD3.transition(axis_x, time).call(axis_bottom.scale(scale_x));\n",
       "      var axis_y = axes.select('g.axis.y');\n",
       "      BrunelD3.transition(axis_y, time).call(axis_left.scale(scale_y));\n",
       "    }\n",
       "    zoom.on('zoom', function(t, time) {\n",
       "        t = t ||BrunelD3.restrictZoom(d3.event.transform, geom, this);\n",
       "        scale_y = t.rescaleY(base_scales[1]);\n",
       "        zoomNode.__zoom = t;\n",
       "        interior.attr('class', 'interior ' + BrunelD3.zoomLabel(t.k));;\n",
       "        build(time || -1);\n",
       "    });\n",
       "\n",
       "    // Define element #1 ///////////////////////////////////////////////////////////////////////////\n",
       "\n",
       "    elements[0] = function() {\n",
       "      var original, processed,                           // data sets passed in and then transformed\n",
       "        element, data,                                 // brunel element information and brunel data\n",
       "        selection, merged;                                      // d3 selection and merged selection\n",
       "      var elementGroup = interior.append('g').attr('class', 'element1'),\n",
       "        main = elementGroup.append('g').attr('class', 'main'),\n",
       "        labels = BrunelD3.undoTransform(elementGroup.append('g').attr('class', 'labels').attr('aria-hidden', 'true'), elementGroup);\n",
       "\n",
       "      function makeData() {\n",
       "        original = datasets[0];\n",
       "        if (filterRows) original = original.retainRows(filterRows);\n",
       "        processed = pre(original, 0)\n",
       "          .summarize('CCDebt=CCDebt:mean; Residence=Residence:base; Income=Income; MortgageDefault=MortgageDefault')\n",
       "          .stack('Income; Residence; MortgageDefault; false');\n",
       "        processed = post(processed, 0);\n",
       "        var f0 = processed.field('Income$lower'),\n",
       "          f1 = processed.field('Income$upper'),\n",
       "          f2 = processed.field('Residence'),\n",
       "          f3 = processed.field('Income'),\n",
       "          f4 = processed.field('MortgageDefault'),\n",
       "          f5 = processed.field('CCDebt'),\n",
       "          f6 = processed.field('#row'),\n",
       "          f7 = processed.field('#selection');\n",
       "        var keyFunc = function(d) { return f6.value(d) };\n",
       "        data = {\n",
       "          Income$lower: function(d) { return f0.value(d.row) },\n",
       "          Income$upper: function(d) { return f1.value(d.row) },\n",
       "          Residence:    function(d) { return f2.value(d.row) },\n",
       "          Income:       function(d) { return f3.value(d.row) },\n",
       "          MortgageDefault:function(d) { return f4.value(d.row) },\n",
       "          CCDebt:       function(d) { return f5.value(d.row) },\n",
       "          $row:         function(d) { return f6.value(d.row) },\n",
       "          $selection:   function(d) { return f7.value(d.row) },\n",
       "          Income$lower_f:function(d) { return f0.valueFormatted(d.row) },\n",
       "          Income$upper_f:function(d) { return f1.valueFormatted(d.row) },\n",
       "          Residence_f:  function(d) { return f2.valueFormatted(d.row) },\n",
       "          Income_f:     function(d) { return f3.valueFormatted(d.row) },\n",
       "          MortgageDefault_f:function(d) { return f4.valueFormatted(d.row) },\n",
       "          CCDebt_f:     function(d) { return f5.valueFormatted(d.row) },\n",
       "          $row_f:       function(d) { return f6.valueFormatted(d.row) },\n",
       "          $selection_f: function(d) { return f7.valueFormatted(d.row) },\n",
       "          _split:       function(d) { return f4.value(d.row) },\n",
       "          _key:         keyFunc,\n",
       "          _rows:        BrunelD3.makeRowsWithKeys(keyFunc, processed.rowCount())\n",
       "        };\n",
       "      }\n",
       "      // Aesthetic Functions\n",
       "      var scale_color = d3.scaleOrdinal()\n",
       "        .domain(['N', 'Y'])\n",
       "        .range([ '#347DAD', '#D43F58', '#F7D84A', '#31A461', '#A66A9C', '#FF954D', \n",
       "          '#A7978E', '#FFCA4D', '#F99EAF', '#B1C43B', '#7E64A2', '#FFB04D', '#CA5C7C', \n",
       "          '#DDBC8C', '#FFA28D', '#A5473D', '#8B6141', '#F57357', '#5C6B46']);\n",
       "      var color = function(d) { return scale_color(data.MortgageDefault(d)) };\n",
       "      legends._legend = legends._legend || { title: ['Mortgage Default'], \n",
       "        ticks: scale_color.domain()};\n",
       "      legends._legend.color = scale_color;\n",
       "\n",
       "      // Build element from data ///////////////////////////////////////////////////////////////////\n",
       "\n",
       "      function build(transitionMillis) {\n",
       "        element = elements[0];\n",
       "        var w = 0.9 * Math.abs(scale_x(scale_x.domain()[1]) - scale_x(scale_x.domain()[0]) );\n",
       "        var x = function(d) { return scale_x(data.Residence(d))};\n",
       "        var h = geom.default_point_size;\n",
       "        var y1 = function(d) { return scale_y(data.Income$lower(d))};\n",
       "        var y2 = function(d) { return scale_y(data.Income$upper(d))};\n",
       "        var y = function(d) { return scale_y( (data.Income$upper(d) + data.Income$lower(d) )/2)};\n",
       "\n",
       "        // Define selection entry operations\n",
       "        function initialState(selection) {\n",
       "          selection\n",
       "            .attr('class', 'element bar filled')\n",
       "        }\n",
       "\n",
       "        // Define selection update operations on merged data\n",
       "        function updateState(selection) {\n",
       "          selection\n",
       "            .each(function(d) {\n",
       "              var width = w, left = x(d) - width/2, \n",
       "              c = y1(d), d = y2(d), top = Math.min(c,d), height = Math.max(1e-6, Math.abs(c-d));\n",
       "              this.r = {x:left, y:top, w:width, h:height};\n",
       "            })\n",
       "            .attr('x', function(d) { return this.r.x })\n",
       "            .attr('y', function(d) { return this.r.y })\n",
       "            .attr('width', function(d) { return this.r.w })\n",
       "            .attr('height', function(d) { return this.r.h })\n",
       "            .filter(BrunelD3.hasData)                     // following only performed for data items\n",
       "            .style('fill', color);\n",
       "        }\n",
       "\n",
       "        // Define labeling for the selection\n",
       "        function label(selection, transitionMillis) {\n",
       "\n",
       "          var tooltipLabeling  = {\n",
       "            index: -1, method: 'box', location: ['center', 'top'], inside: true, align: 'middle', pad: 0, dy: 0.7,\n",
       "            fit: true, granularity: 0,\n",
       "            content: function(d) {\n",
       "              return d.row == null ? null : '<span class=\"field\">' + data.Income_f(d) + '</span>'\n",
       "            }\n",
       "          };\n",
       "          BrunelD3.addTooltip(selection, tooltipLabeling, geom);\n",
       "        }\n",
       "        // Create selections, set the initial state and transition updates\n",
       "        selection = main.selectAll('.element').data(data._rows, function(d) { return d.key });\n",
       "        var added = selection.enter().append('rect');\n",
       "        merged = selection.merge(added);\n",
       "        initialState(added);\n",
       "        selection.filter(BrunelD3.hasData)\n",
       "          .classed('selected', BrunelD3.isSelected(data))\n",
       "          .filter(BrunelD3.isSelected(data)).raise();\n",
       "        updateState(BrunelD3.transition(merged, transitionMillis));\n",
       "        label(merged, transitionMillis);\n",
       "\n",
       "        BrunelD3.transition(selection.exit(), transitionMillis/3)\n",
       "          .style('opacity', 0.5).each( function() {\n",
       "            this.remove(); BrunelD3.removeLabels(this); \n",
       "        });\n",
       "      }\n",
       "\n",
       "      return {\n",
       "        data:           function() { return processed },\n",
       "        original:       function() { return original },\n",
       "        internal:       function() { return data },\n",
       "        selection:      function() { return merged },\n",
       "        makeData:       makeData,\n",
       "        build:          build,\n",
       "        chart:          function() { return charts[0] },\n",
       "        group:          function() { return elementGroup },\n",
       "        fields: {\n",
       "          x:            ['Residence'],\n",
       "          y:            ['Income'],\n",
       "          key:          ['#row'],\n",
       "          color:        ['MortgageDefault']\n",
       "        }\n",
       "      };\n",
       "    }();\n",
       "\n",
       "    function build(time, noData) {\n",
       "      var first = elements[0].data() == null;\n",
       "      if (first) time = 0;                                           // no transition for first call\n",
       "      buildAxes(time);\n",
       "      if ((first || time > -1) && !noData) {\n",
       "        elements[0].makeData();\n",
       "        BrunelD3.addLegend(legends, legends._legend);\n",
       "      }\n",
       "      elements[0].build(time);\n",
       "    }\n",
       "\n",
       "    // Expose the following components of the chart\n",
       "    return {\n",
       "      elements : elements,\n",
       "      interior : interior,\n",
       "      scales: {x:scale_x, y:scale_y},\n",
       "      zoom: function(params, time) {\n",
       "          if (params) zoom.on('zoom').call(zoomNode, params, time);\n",
       "          return d3.zoomTransform(zoomNode);\n",
       "      },\n",
       "      build : build\n",
       "    };\n",
       "    }();\n",
       "\n",
       "  // Define chart #2 in the visualization //////////////////////////////////////////////////////////\n",
       "\n",
       "  charts[1] = function(parentNode, filterRows) {\n",
       "    var geom = BrunelD3.geometry(parentNode || vis.node(), 0, 0.5, 1, 1, 5, 43, 37, 118),\n",
       "      elements = [];                                              // array of elements in this chart\n",
       "\n",
       "    // Define groups for the chart parts ///////////////////////////////////////////////////////////\n",
       "\n",
       "    var chart =  vis.append('g').attr('class', 'chart2')\n",
       "      .attr('transform','translate(' + geom.chart_left + ',' + geom.chart_top + ')');\n",
       "    var overlay = chart.append('g').attr('class', 'element').attr('class', 'overlay');\n",
       "    var zoom = d3.zoom().scaleExtent([1/3,3]);\n",
       "    var zoomNode = overlay.append('rect').attr('class', 'overlay')\n",
       "      .attr('x', geom.inner_left).attr('y', geom.inner_top)\n",
       "      .attr('width', geom.inner_rawWidth).attr('height', geom.inner_rawHeight)\n",
       "      .style('cursor', 'move').call(zoom)\n",
       "      .node();\n",
       "    zoomNode.__zoom = d3.zoomIdentity;\n",
       "    chart.append('rect').attr('class', 'background').attr('width', geom.chart_right-geom.chart_left).attr('height', geom.chart_bottom-geom.chart_top);\n",
       "    var interior = chart.append('g').attr('class', 'interior zoomNone')\n",
       "      .attr('transform','translate(' + geom.inner_left + ',' + geom.inner_top + ')')\n",
       "      .attr('clip-path', 'url(#clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart2_inner)');\n",
       "    interior.append('rect').attr('class', 'inner').attr('width', geom.inner_width).attr('height', geom.inner_height);\n",
       "    var gridGroup = interior.append('g').attr('class', 'grid');\n",
       "    var axes = chart.append('g').attr('class', 'axis')\n",
       "      .attr('transform','translate(' + geom.inner_left + ',' + geom.inner_top + ')');\n",
       "    var legends = chart.append('g').attr('class', 'legend')\n",
       "      .attr('transform','translate(' + (geom.chart_right-geom.chart_left - 3) + ',' + 0 + ')');\n",
       "    vis.append('clipPath').attr('id', 'clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart2_inner').append('rect')\n",
       "      .attr('x', 0).attr('y', 0)\n",
       "      .attr('width', geom.inner_rawWidth+1).attr('height', geom.inner_rawHeight+1);\n",
       "\n",
       "    // Scales //////////////////////////////////////////////////////////////////////////////////////\n",
       "\n",
       "    var scale_x = d3.scaleLinear().domain([-5, 35.000004])\n",
       "      .range([0, geom.inner_width]);\n",
       "    var scale_inner = d3.scaleLinear().domain([0,1])\n",
       "      .range([-0.5, 0.5]);\n",
       "    var scale_y = d3.scaleLinear().domain([-5, 35.000004])\n",
       "      .range([geom.inner_height, 0]);\n",
       "    var base_scales = [scale_x, scale_y];                           // untransformed original scales\n",
       "\n",
       "    // Axes ////////////////////////////////////////////////////////////////////////////////////////\n",
       "\n",
       "    axes.append('g').attr('class', 'x axis')\n",
       "      .attr('transform','translate(0,' + geom.inner_rawHeight + ')')\n",
       "      .attr('clip-path', 'url(#clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart2_haxis)');\n",
       "    vis.append('clipPath').attr('id', 'clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart2_haxis').append('polyline')\n",
       "      .attr('points', '-1,-1000, -1,-1 -5,5, -1000,5, -100,1000, 10000,1000 10000,-1000');\n",
       "    axes.select('g.axis.x').append('text').attr('class', 'title').text('Year Current Address').style('text-anchor', 'middle')\n",
       "      .attr('x',geom.inner_rawWidth/2)\n",
       "      .attr('y', geom.inner_bottom - 2.0).attr('dy','-0.27em');\n",
       "    axes.append('g').attr('class', 'y axis')\n",
       "      .attr('clip-path', 'url(#clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart2_vaxis)');\n",
       "    vis.append('clipPath').attr('id', 'clip_visid79c75bbc-deba-11e8-b568-ce419921e9d1_chart2_vaxis').append('polyline')\n",
       "      .attr('points', '-1000,-10000, 10000,-10000, 10000,' + (geom.inner_rawHeight+1) + ', -1,' + (geom.inner_rawHeight+1) + ', -1,' + (geom.inner_rawHeight+5) + ', -1000,' + (geom.inner_rawHeight+5) );\n",
       "    axes.select('g.axis.y').append('text').attr('class', 'title').text('Years Current Employer').style('text-anchor', 'middle')\n",
       "      .attr('x',-geom.inner_rawHeight/2)\n",
       "      .attr('y', 4-geom.inner_left).attr('dy', '0.7em').attr('transform', 'rotate(270)');\n",
       "\n",
       "    var axis_bottom = d3.axisBottom(scale_x).ticks(Math.min(10, Math.round(geom.inner_width / 33.0)));\n",
       "    var axis_left = d3.axisLeft(scale_y).ticks(Math.min(10, Math.round(geom.inner_width / 20)));\n",
       "\n",
       "    function buildAxes(time) {\n",
       "      var axis_x = axes.select('g.axis.x');\n",
       "      BrunelD3.transition(axis_x, time).call(axis_bottom.scale(scale_x));\n",
       "      var axis_y = axes.select('g.axis.y');\n",
       "      BrunelD3.transition(axis_y, time).call(axis_left.scale(scale_y));\n",
       "    }\n",
       "    zoom.on('zoom', function(t, time) {\n",
       "        t = t ||BrunelD3.restrictZoom(d3.event.transform, geom, this);\n",
       "        scale_x = t.rescaleX(base_scales[0]);\n",
       "        scale_y = t.rescaleY(base_scales[1]);\n",
       "        zoomNode.__zoom = t;\n",
       "        interior.attr('class', 'interior ' + BrunelD3.zoomLabel(t.k));;\n",
       "        build(time || -1);\n",
       "    });\n",
       "\n",
       "    // Define element #1 ///////////////////////////////////////////////////////////////////////////\n",
       "\n",
       "    elements[0] = function() {\n",
       "      var original, processed,                           // data sets passed in and then transformed\n",
       "        element, data,                                 // brunel element information and brunel data\n",
       "        selection, merged;                                      // d3 selection and merged selection\n",
       "      var elementGroup = interior.append('g').attr('class', 'element1'),\n",
       "        main = elementGroup.append('g').attr('class', 'main'),\n",
       "        labels = BrunelD3.undoTransform(elementGroup.append('g').attr('class', 'labels').attr('aria-hidden', 'true'), elementGroup);\n",
       "\n",
       "      function makeData() {\n",
       "        original = datasets[0];\n",
       "        if (filterRows) original = original.retainRows(filterRows);\n",
       "        processed = pre(original, 0);\n",
       "        processed = post(processed, 0);\n",
       "        var f0 = processed.field('YearCurrentAddress'),\n",
       "          f1 = processed.field('YearsCurrentEmployer'),\n",
       "          f2 = processed.field('MortgageDefault'),\n",
       "          f3 = processed.field('#row'),\n",
       "          f4 = processed.field('#selection');\n",
       "        var keyFunc = function(d) { return f3.value(d) };\n",
       "        data = {\n",
       "          YearCurrentAddress:function(d) { return f0.value(d.row) },\n",
       "          YearsCurrentEmployer:function(d) { return f1.value(d.row) },\n",
       "          MortgageDefault:function(d) { return f2.value(d.row) },\n",
       "          $row:         function(d) { return f3.value(d.row) },\n",
       "          $selection:   function(d) { return f4.value(d.row) },\n",
       "          YearCurrentAddress_f:function(d) { return f0.valueFormatted(d.row) },\n",
       "          YearsCurrentEmployer_f:function(d) { return f1.valueFormatted(d.row) },\n",
       "          MortgageDefault_f:function(d) { return f2.valueFormatted(d.row) },\n",
       "          $row_f:       function(d) { return f3.valueFormatted(d.row) },\n",
       "          $selection_f: function(d) { return f4.valueFormatted(d.row) },\n",
       "          _split:       function(d) { return f2.value(d.row) },\n",
       "          _key:         keyFunc,\n",
       "          _rows:        BrunelD3.makeRowsWithKeys(keyFunc, processed.rowCount())\n",
       "        };\n",
       "      }\n",
       "      // Aesthetic Functions\n",
       "      var scale_color = d3.scaleOrdinal()\n",
       "        .domain(['N', 'Y'])\n",
       "        .range([ '#00538A', '#C10020', '#F4C800', '#007D34', '#803E75', '#FF6800', \n",
       "          '#817066', '#FFB300', '#F6768E', '#93AA00', '#53377A', '#FF8E00', '#B32851', \n",
       "          '#CEA262', '#FF7A5C', '#7F180D', '#593315', '#F13A13', '#232C16']);\n",
       "      var color = function(d) { return scale_color(data.MortgageDefault(d)) };\n",
       "      legends._legend = legends._legend || { title: ['Mortgage Default'], \n",
       "        ticks: scale_color.domain()};\n",
       "      legends._legend.color = scale_color;\n",
       "\n",
       "      // Build element from data ///////////////////////////////////////////////////////////////////\n",
       "\n",
       "      function build(transitionMillis) {\n",
       "        element = elements[0];\n",
       "        var w = Math.abs( scale_x(scale_x.domain()[0] + 1.0) - scale_x.range()[0] );\n",
       "        var x = function(d) { return scale_x(data.YearCurrentAddress(d))};\n",
       "        var h = Math.abs( scale_y(scale_y.domain()[0] + 1.0) - scale_y.range()[0] );\n",
       "        var y = function(d) { return scale_y(data.YearsCurrentEmployer(d))};\n",
       "\n",
       "        // Define selection entry operations\n",
       "        function initialState(selection) {\n",
       "          selection\n",
       "            .attr('class', 'element point filled')\n",
       "        }\n",
       "\n",
       "        // Define selection update operations on merged data\n",
       "        function updateState(selection) {\n",
       "          selection\n",
       "            .attr('cx',function(d) { return scale_x(data.YearCurrentAddress(d))})\n",
       "            .attr('cy',function(d) { return scale_y(data.YearsCurrentEmployer(d))})\n",
       "            .attr('r',Math.min(Math.abs( scale_x(scale_x.domain()[0] + 1.0) - scale_x.range()[0] ), Math.abs( scale_y(scale_y.domain()[0] + 1.0) - scale_y.range()[0] )) / 2)\n",
       "            .filter(BrunelD3.hasData)                     // following only performed for data items\n",
       "            .style('fill', color);\n",
       "        }\n",
       "\n",
       "        // Define labeling for the selection\n",
       "        function label(selection, transitionMillis) {\n",
       "\n",
       "          var tooltipLabeling  = {\n",
       "            index: -1, method: 'box', location: ['center', 'top'], inside: true, align: 'middle', pad: 0, dy: 0.7,\n",
       "            fit: true, granularity: 0,\n",
       "            content: function(d) {\n",
       "              return d.row == null ? null : '<span class=\"title\">Year Current Address: </span>'\n",
       "\t\t\t+ '<span class=\"field\">' + data.YearCurrentAddress_f(d) + '</span>'\n",
       "\t\t\t+ '<br/>'\n",
       "\t\t\t+ '<span class=\"title\">Years Current Employer: </span>'\n",
       "\t\t\t+ '<span class=\"field\">' + data.YearsCurrentEmployer_f(d) + '</span>'\n",
       "            }\n",
       "          };\n",
       "          BrunelD3.addTooltip(selection, tooltipLabeling, geom);\n",
       "        }\n",
       "        // Create selections, set the initial state and transition updates\n",
       "        selection = main.selectAll('.element').data(data._rows, function(d) { return d.key });\n",
       "        var added = selection.enter().append('circle');\n",
       "        merged = selection.merge(added);\n",
       "        initialState(added);\n",
       "        selection.filter(BrunelD3.hasData)\n",
       "          .classed('selected', BrunelD3.isSelected(data))\n",
       "          .filter(BrunelD3.isSelected(data)).raise();\n",
       "        updateState(BrunelD3.transition(merged, transitionMillis));\n",
       "        label(merged, transitionMillis);\n",
       "\n",
       "        BrunelD3.transition(selection.exit(), transitionMillis/3)\n",
       "          .style('opacity', 0.5).each( function() {\n",
       "            this.remove(); BrunelD3.removeLabels(this); \n",
       "        });\n",
       "      }\n",
       "\n",
       "      return {\n",
       "        data:           function() { return processed },\n",
       "        original:       function() { return original },\n",
       "        internal:       function() { return data },\n",
       "        selection:      function() { return merged },\n",
       "        makeData:       makeData,\n",
       "        build:          build,\n",
       "        chart:          function() { return charts[1] },\n",
       "        group:          function() { return elementGroup },\n",
       "        fields: {\n",
       "          x:            ['YearCurrentAddress'],\n",
       "          y:            ['YearsCurrentEmployer'],\n",
       "          key:          ['#row'],\n",
       "          color:        ['MortgageDefault']\n",
       "        }\n",
       "      };\n",
       "    }();\n",
       "\n",
       "    function build(time, noData) {\n",
       "      var first = elements[0].data() == null;\n",
       "      if (first) time = 0;                                           // no transition for first call\n",
       "      buildAxes(time);\n",
       "      if ((first || time > -1) && !noData) {\n",
       "        elements[0].makeData();\n",
       "        BrunelD3.addLegend(legends, legends._legend);\n",
       "      }\n",
       "      elements[0].build(time);\n",
       "    }\n",
       "\n",
       "    // Expose the following components of the chart\n",
       "    return {\n",
       "      elements : elements,\n",
       "      interior : interior,\n",
       "      scales: {x:scale_x, y:scale_y},\n",
       "      zoom: function(params, time) {\n",
       "          if (params) zoom.on('zoom').call(zoomNode, params, time);\n",
       "          return d3.zoomTransform(zoomNode);\n",
       "      },\n",
       "      build : build\n",
       "    };\n",
       "    }();\n",
       "\n",
       "  function setData(rowData, i) { datasets[i||0] = BrunelD3.makeData(rowData) }\n",
       "  function updateAll(time) { charts.forEach(function(x) {x.build(time || 0)}) }\n",
       "  function buildAll() {\n",
       "    for (var i=0;i<arguments.length;i++) setData(arguments[i], i);\n",
       "    updateAll(transitionTime);\n",
       "  }\n",
       "\n",
       "  return {\n",
       "    dataPreProcess:     function(f) { if (f) pre = f; return pre },\n",
       "    dataPostProcess:    function(f) { if (f) post = f; return post },\n",
       "    data:               function(d,i) { if (d) setData(d,i); return datasets[i||0] },\n",
       "    visId:              visId,\n",
       "    build:              buildAll,\n",
       "    rebuild:            updateAll,\n",
       "    charts:             charts\n",
       "  }\n",
       "}\n",
       "\n",
       "// Data Tables /////////////////////////////////////////////////////////////////////////////////////\n",
       "\n",
       "var table1 = {\n",
       "   summarized: false,\n",
       "   names: ['Residence', 'Income', 'MortgageDefault', 'CCDebt', 'YearCurrentAddress', 'YearsCurrentEmployer'], \n",
       "   options: ['string', 'numeric', 'string', 'numeric', 'numeric', 'numeric'], \n",
       "   rows: [['O', 43593, 'N', 2315, 13, 0], ['O', 45706, 'Y', 373, 17, 16],\n",
       "  ['O', 44202, 'N', 748, 8, 0], ['O', 43800, 'N', 725, 0, 4], ['P', 56087, 'N', 4818, 27, 18],\n",
       "  ['O', 48336, 'Y', 1227, 16, 2], ['P', 55642, 'N', 240, 4, 22], ['P', 43650, 'N', 267, 8, 12],\n",
       "  ['O', 59193, 'N', 2295, 26, 0], ['O', 44483, 'Y', 116, 16, 15], ['O', 50295, 'N', 298, 3, 12],\n",
       "  ['S', 52540, 'Y', 397, 0, 15], ['P', 55897, 'N', 315, 13, 2], ['O', 44895, 'Y', 888, 8, 0],\n",
       "  ['O', 45209, 'Y', 658, 4, 9], ['O', 43202, 'N', 1412, 17, 7], ['O', 53552, 'Y', 1255, 19, 22],\n",
       "  ['P', 52118, 'Y', 2771, 17, 22], ['O', 54792, 'Y', 1223, 22, 17], ['O', 57718, 'Y', 1555, 25, 16],\n",
       "  ['O', 44052, 'Y', 375, 13, 5], ['P', 44193, 'N', 260, 18, 3], ['P', 45115, 'N', 5189, 11, 13],\n",
       "  ['L', 43474, 'N', 270, 17, 1], ['O', 49678, 'N', 564, 11, 8], ['O', 56849, 'N', 117, 4, 4],\n",
       "  ['P', 50808, 'Y', 457, 19, 18], ['O', 58505, 'N', 668, 11, 9], ['P', 51945, 'Y', 25, 19, 0],\n",
       "  ['O', 49075, 'Y', 133, 7, 16], ['O', 53115, 'Y', 674, 12, 1], ['O', 53195, 'N', 7757, 8, 31],\n",
       "  ['O', 54603, 'N', 1562, 8, 30], ['O', 59036, 'Y', 495, 7, 6], ['O', 53559, 'N', 2646, 7, 19],\n",
       "  ['P', 44997, 'N', 1238, 6, 18], ['P', 44442, 'Y', 578, 12, 16], ['O', 44617, 'Y', 154, 4, 10],\n",
       "  ['O', 44684, 'N', 194, 6, 9], ['O', 43482, 'N', 361, 4, 1], ['O', 56891, 'N', 1543, 26, 1],\n",
       "  ['O', 59463, 'N', 1298, 2, 9], ['O', 59508, 'N', 3671, 2, 19], ['O', 43895, 'N', 446, 7, 18],\n",
       "  ['O', 55497, 'Y', 637, 7, 3], ['O', 43890, 'N', 505, 19, 18], ['O', 44772, 'N', 469, 9, 6],\n",
       "  ['P', 44271, 'Y', 284, 17, 20], ['P', 44194, 'Y', 1007, 16, 2], ['O', 53201, 'N', 17134, 18, 29],\n",
       "  ['P', 46949, 'N', 1634, 0, 2], ['O', 57689, 'Y', 331, 25, 19], ['O', 46645, 'N', 884, 19, 4],\n",
       "  ['O', 44048, 'N', 222, 0, 6], ['P', 45949, 'Y', 3865, 17, 7], ['P', 45659, 'N', 9466, 12, 17],\n",
       "  ['P', 43750, 'N', 988, 13, 6], ['O', 43761, 'N', 1418, 10, 6], ['O', 45673, 'N', 359, 22, 16],\n",
       "  ['O', 49409, 'N', 107, 11, 12], ['O', 54021, 'Y', 101, 2, 4], ['O', 50799, 'Y', 1919, 22, 19],\n",
       "  ['O', 53365, 'Y', 3819, 21, 26], ['O', 50515, 'Y', 1642, 3, 5], ['O', 55421, 'Y', 1169, 11, 3],\n",
       "  ['S', 47734, 'N', 2631, 23, 6], ['P', 55777, 'Y', 453, 1, 11], ['O', 50302, 'Y', 455, 20, 9],\n",
       "  ['P', 44095, 'N', 368, 13, 4], ['O', 45621, 'Y', 1878, 1, 19], ['L', 45849, 'Y', 364, 13, 9],\n",
       "  ['O', 52545, 'Y', 1125, 25, 14], ['P', 50075, 'N', 3768, 4, 18], ['O', 43303, 'N', 866, 2, 7],\n",
       "  ['O', 44363, 'Y', 1609, 5, 19], ['O', 45450, 'Y', 4217, 15, 24], ['O', 45081, 'N', 713, 14, 15],\n",
       "  ['O', 44460, 'Y', 3467, 4, 16], ['P', 45419, 'N', 231, 1, 2], ['L', 45721, 'N', 294, 3, 14],\n",
       "  ['O', 45103, 'Y', 2327, 21, 14], ['L', 55112, 'Y', 4113, 10, 14], ['P', 46823, 'N', 94, 22, 2],\n",
       "  ['O', 57683, 'Y', 3275, 14, 24], ['O', 55752, 'Y', 2048, 5, 11], ['P', 46168, 'Y', 3762, 0, 6],\n",
       "  ['O', 45904, 'N', 60, 22, 7], ['P', 44477, 'N', 351, 19, 15], ['P', 44010, 'N', 542, 4, 7],\n",
       "  ['L', 45246, 'Y', 737, 6, 5], ['L', 55390, 'N', 812, 23, 3], ['O', 49529, 'Y', 342, 9, 10],\n",
       "  ['P', 47019, 'N', 1138, 11, 21], ['P', 43514, 'Y', 274, 17, 0], ['O', 52495, 'Y', 2527, 18, 16],\n",
       "  ['P', 45537, 'Y', 2698, 22, 21], ['P', 44892, 'N', 3337, 12, 2], ['P', 52173, 'Y', 689, 4, 22],\n",
       "  ['O', 49407, 'Y', 1793, 23, 13], ['O', 43622, 'Y', 3828, 8, 18], ['O', 44298, 'Y', 763, 16, 19],\n",
       "  ['O', 44705, 'N', 230, 0, 8], ['P', 49600, 'N', 3366, 5, 9], ['O', 48599, 'Y', 1363, 16, 25],\n",
       "  ['S', 43677, 'N', 740, 16, 9], ['P', 45993, 'N', 311, 6, 7], ['O', 54671, 'Y', 3612, 25, 28],\n",
       "  ['O', 53180, 'Y', 11860, 9, 31], ['P', 43120, 'Y', 801, 4, 10], ['O', 44039, 'Y', 109, 17, 6],\n",
       "  ['P', 43293, 'Y', 2207, 16, 7], ['P', 45283, 'Y', 1460, 15, 3], ['P', 47568, 'Y', 2391, 5, 11],\n",
       "  ['P', 50631, 'N', 2132, 26, 21], ['P', 51859, 'Y', 369, 19, 2], ['O', 44597, 'N', 468, 10, 12],\n",
       "  ['P', 45584, 'N', 1256, 2, 19], ['O', 44582, 'N', 1581, 1, 13], ['O', 44270, 'N', 962, 3, 22],\n",
       "  ['O', 45549, 'N', 5791, 2, 21], ['O', 45712, 'N', 2216, 14, 15], ['P', 45654, 'Y', 5471, 6, 18],\n",
       "  ['P', 48414, 'Y', 232, 9, 0], ['O', 53307, 'N', 1984, 8, 27], ['O', 58878, 'Y', 1680, 18, 9],\n",
       "  ['P', 43977, 'N', 4763, 14, 12], ['P', 51561, 'N', 3010, 17, 5], ['O', 55140, 'N', 5095, 20, 13],\n",
       "  ['O', 59201, 'Y', 12164, 12, 25], ['P', 46965, 'Y', 83, 21, 0], ['O', 44150, 'Y', 1038, 9, 4],\n",
       "  ['P', 45240, 'N', 1320, 12, 5], ['P', 44682, 'Y', 1192, 12, 9], ['L', 43669, 'Y', 2518, 18, 10],\n",
       "  ['S', 43348, 'Y', 608, 12, 5], ['P', 57598, 'N', 2171, 25, 16], ['P', 51939, 'Y', 382, 5, 2],\n",
       "  ['O', 57623, 'N', 4133, 1, 10], ['O', 43146, 'Y', 679, 0, 10], ['P', 45318, 'Y', 461, 2, 3],\n",
       "  ['P', 44005, 'N', 25, 16, 8], ['O', 44306, 'Y', 7995, 15, 19], ['P', 45001, 'Y', 2134, 11, 17],\n",
       "  ['O', 44395, 'Y', 1299, 20, 16], ['P', 53550, 'Y', 544, 11, 23], ['O', 50816, 'Y', 2031, 0, 17],\n",
       "  ['L', 47035, 'Y', 2003, 8, 15], ['O', 53102, 'Y', 1147, 15, 1], ['O', 45452, 'N', 5490, 12, 24],\n",
       "  ['P', 51498, 'N', 589, 26, 9], ['P', 57376, 'Y', 684, 21, 27], ['O', 52772, 'N', 1348, 23, 9],\n",
       "  ['O', 44261, 'Y', 823, 9, 22], ['L', 43823, 'N', 2245, 14, 1], ['P', 43151, 'N', 681, 6, 9],\n",
       "  ['O', 44230, 'N', 3106, 9, 22], ['O', 50552, 'Y', 466, 5, 23], ['O', 53704, 'Y', 490, 21, 17],\n",
       "  ['O', 53842, 'N', 3115, 25, 13], ['P', 58381, 'N', 829, 16, 12], ['O', 48607, 'N', 985, 19, 23],\n",
       "  ['O', 44202, 'N', 748, 8, 0], ['P', 44974, 'N', 2772, 14, 18], ['P', 52725, 'N', 12, 26, 9],\n",
       "  ['O', 44483, 'Y', 116, 16, 15], ['P', 45217, 'Y', 732, 19, 8], ['O', 44895, 'Y', 888, 8, 0],\n",
       "  ['P', 55554, 'N', 708, 27, 0], ['O', 57718, 'Y', 1555, 25, 16], ['P', 49008, 'N', 216, 10, 16],\n",
       "  ['P', 54013, 'N', 996, 9, 4], ['O', 59036, 'Y', 495, 7, 6], ['O', 43989, 'N', 30, 8, 10],\n",
       "  ['O', 56891, 'N', 1543, 26, 1], ['P', 51219, 'Y', 1292, 14, 15], ['O', 56486, 'N', 696, 5, 11],\n",
       "  ['L', 49007, 'N', 13360, 14, 18], ['O', 44202, 'N', 2611, 1, 23], ['O', 54673, 'N', 3086, 15, 22],\n",
       "  ['O', 57689, 'Y', 331, 25, 19], ['P', 45949, 'Y', 3865, 17, 7], ['O', 43761, 'N', 1418, 10, 6],\n",
       "  ['P', 46785, 'N', 1227, 14, 4], ['O', 55421, 'Y', 1169, 11, 3], ['O', 45153, 'Y', 804, 2, 13],\n",
       "  ['O', 45621, 'Y', 1878, 1, 19], ['P', 57004, 'N', 3561, 14, 31], ['O', 44460, 'Y', 3467, 4, 16],\n",
       "  ['O', 43707, 'N', 1131, 8, 9], ['O', 55565, 'Y', 2219, 23, 0], ['P', 45750, 'N', 1930, 13, 13],\n",
       "  ['P', 45266, 'Y', 6805, 3, 5], ['P', 43514, 'Y', 274, 17, 0], ['O', 52495, 'Y', 2527, 18, 16],\n",
       "  ['P', 45537, 'Y', 2698, 22, 21], ['P', 44892, 'N', 3337, 12, 2], ['P', 52887, 'Y', 1339, 10, 9],\n",
       "  ['P', 44671, 'Y', 3971, 16, 9], ['L', 49850, 'N', 1265, 5, 1], ['P', 50631, 'N', 2132, 26, 21],\n",
       "  ['O', 45712, 'N', 2216, 14, 15], ['P', 58785, 'N', 1111, 31, 16], ['P', 43651, 'N', 527, 4, 11],\n",
       "  ['P', 44682, 'Y', 1192, 12, 9], ['O', 45390, 'N', 154, 3, 2], ['P', 57388, 'Y', 3450, 23, 22],\n",
       "  ['O', 47623, 'Y', 1358, 12, 7], ['O', 45194, 'N', 1678, 15, 10], ['P', 43876, 'N', 98, 13, 0],\n",
       "  ['P', 53550, 'Y', 544, 11, 23], ['O', 59944, 'N', 3894, 20, 11], ['O', 43794, 'N', 1430, 9, 6],\n",
       "  ['O', 44787, 'N', 982, 9, 4], ['P', 53983, 'N', 2117, 1, 9], ['O', 44261, 'Y', 823, 9, 22],\n",
       "  ['O', 51385, 'N', 777, 14, 10], ['P', 47111, 'Y', 1001, 1, 14], ['O', 44756, 'N', 2117, 19, 6],\n",
       "  ['O', 45715, 'N', 772, 8, 14], ['P', 45049, 'N', 1345, 6, 16], ['P', 44974, 'N', 2772, 14, 18],\n",
       "  ['O', 44956, 'Y', 806, 21, 21], ['P', 52725, 'N', 12, 26, 9], ['P', 43795, 'Y', 1171, 17, 5],\n",
       "  ['P', 43972, 'Y', 340, 0, 13], ['O', 43330, 'N', 25, 9, 6], ['O', 43185, 'N', 1646, 1, 9],\n",
       "  ['O', 46955, 'Y', 201, 16, 1], ['O', 51383, 'N', 1119, 19, 12], ['O', 44781, 'N', 331, 15, 4],\n",
       "  ['P', 45217, 'Y', 732, 19, 8], ['O', 45813, 'Y', 59, 10, 13], ['P', 45687, 'N', 1064, 22, 16],\n",
       "  ['P', 49745, 'N', 518, 24, 6], ['P', 55554, 'N', 708, 27, 0], ['P', 52973, 'Y', 2535, 13, 3],\n",
       "  ['P', 52961, 'Y', 1853, 17, 4], ['P', 43908, 'N', 4242, 18, 15], ['P', 44613, 'Y', 2134, 17, 11],\n",
       "  ['O', 43645, 'N', 502, 5, 13], ['P', 43322, 'N', 218, 15, 6], ['P', 56087, 'N', 1386, 14, 16],\n",
       "  ['P', 49008, 'N', 216, 10, 16], ['P', 54013, 'N', 996, 9, 4], ['O', 52896, 'Y', 1655, 19, 6],\n",
       "  ['O', 48511, 'N', 793, 21, 25], ['O', 44187, 'N', 693, 19, 3], ['O', 44831, 'Y', 1597, 15, 2],\n",
       "  ['O', 43989, 'N', 30, 8, 10], ['P', 43957, 'N', 286, 18, 13], ['O', 47833, 'N', 854, 9, 6],\n",
       "  ['L', 58026, 'Y', 6156, 17, 13], ['O', 53791, 'Y', 1844, 1, 15], ['P', 44159, 'Y', 1110, 6, 4],\n",
       "  ['P', 51219, 'Y', 1292, 14, 15], ['O', 56486, 'N', 696, 5, 11], ['P', 47623, 'N', 784, 23, 7],\n",
       "  ['L', 49007, 'N', 13360, 14, 18], ['P', 45066, 'Y', 860, 16, 15], ['O', 44202, 'N', 2611, 1, 23],\n",
       "  ['P', 45518, 'N', 8231, 17, 22], ['O', 43874, 'Y', 1320, 18, 0], ['O', 43888, 'Y', 3820, 16, 21],\n",
       "  ['O', 45238, 'Y', 326, 9, 6], ['O', 54673, 'N', 3086, 15, 22], ['P', 45869, 'Y', 71, 21, 8],\n",
       "  ['P', 43799, 'N', 145, 11, 4], ['P', 47026, 'N', 1368, 23, 18], ['O', 45970, 'N', 579, 11, 7],\n",
       "  ['O', 44318, 'N', 2096, 8, 19], ['O', 54938, 'N', 268, 5, 15], ['O', 48084, 'Y', 555, 10, 3],\n",
       "  ['P', 46785, 'N', 1227, 14, 4], ['P', 44449, 'Y', 4168, 9, 16], ['O', 47422, 'Y', 2010, 11, 12],\n",
       "  ['O', 45153, 'Y', 804, 2, 13], ['O', 43820, 'N', 230, 3, 3], ['P', 43633, 'N', 6100, 14, 16],\n",
       "  ['P', 43976, 'N', 745, 18, 12], ['O', 43835, 'N', 1501, 3, 1], ['O', 43408, 'N', 1106, 10, 4],\n",
       "  ['O', 44394, 'N', 2041, 20, 17], ['O', 43982, 'N', 1055, 13, 11], ['O', 44936, 'N', 4502, 1, 22],\n",
       "  ['P', 57004, 'N', 3561, 14, 31], ['P', 48061, 'Y', 296, 3, 5], ['O', 45159, 'N', 2310, 6, 12],\n",
       "  ['O', 48931, 'N', 652, 11, 19], ['P', 44413, 'Y', 885, 13, 16], ['P', 49988, 'N', 2660, 14, 21],\n",
       "  ['P', 47470, 'N', 2111, 9, 12], ['O', 44272, 'Y', 645, 12, 20], ['O', 43707, 'N', 1131, 8, 9],\n",
       "  ['O', 56590, 'Y', 332, 27, 8], ['O', 55565, 'Y', 2219, 23, 0], ['P', 50076, 'N', 460, 0, 17],\n",
       "  ['P', 45750, 'N', 1930, 13, 13], ['P', 45841, 'N', 4159, 11, 12], ['P', 44378, 'Y', 306, 9, 18],\n",
       "  ['P', 45266, 'Y', 6805, 3, 5], ['O', 43362, 'Y', 434, 15, 4], ['O', 59393, 'Y', 2746, 34, 18],\n",
       "  ['P', 56523, 'Y', 2066, 20, 10], ['P', 50445, 'Y', 237, 10, 8], ['P', 47161, 'N', 1096, 0, 13],\n",
       "  ['P', 53731, 'N', 13160, 26, 16], ['P', 55215, 'N', 1930, 1, 6], ['O', 49415, 'Y', 150, 17, 11],\n",
       "  ['O', 45463, 'N', 478, 2, 23], ['O', 50621, 'N', 1047, 24, 22], ['P', 52887, 'Y', 1339, 10, 9],\n",
       "  ['P', 44671, 'Y', 3971, 16, 9], ['P', 50199, 'N', 1230, 5, 12], ['O', 44534, 'Y', 805, 9, 13],\n",
       "  ['O', 43739, 'Y', 2247, 3, 7], ['O', 43648, 'N', 2496, 14, 12], ['P', 59276, 'N', 8000, 20, 21],\n",
       "  ['L', 49850, 'N', 1265, 5, 1], ['P', 50833, 'Y', 760, 21, 16], ['P', 57520, 'N', 890, 25, 19],\n",
       "  ['L', 59179, 'N', 5780, 29, 5], ['O', 59692, 'N', 469, 11, 3], ['P', 56470, 'Y', 390, 31, 15],\n",
       "  ['P', 54777, 'N', 2814, 26, 17], ['P', 44728, 'N', 847, 2, 7], ['O', 44898, 'N', 527, 4, 22],\n",
       "  ['P', 58785, 'N', 1111, 31, 16], ['P', 46501, 'N', 327, 5, 5], ['O', 45368, 'N', 711, 4, 2],\n",
       "  ['P', 43651, 'N', 527, 4, 11], ['P', 49485, 'Y', 563, 24, 10], ['P', 46119, 'Y', 104, 1, 6],\n",
       "  ['O', 45217, 'N', 445, 17, 8], ['O', 45390, 'N', 154, 3, 2], ['P', 57388, 'Y', 3450, 23, 22],\n",
       "  ['O', 49789, 'N', 44, 2, 4], ['O', 47623, 'Y', 1358, 12, 7], ['L', 43185, 'N', 20, 0, 8],\n",
       "  ['O', 45313, 'Y', 341, 13, 3], ['O', 45194, 'N', 1678, 15, 10], ['P', 43876, 'N', 98, 13, 0],\n",
       "  ['P', 53660, 'N', 380, 23, 17], ['O', 59944, 'N', 3894, 20, 11], ['P', 54451, 'N', 3312, 14, 30],\n",
       "  ['L', 58914, 'Y', 1562, 11, 7], ['O', 43794, 'N', 1430, 9, 6], ['O', 44787, 'N', 982, 9, 4],\n",
       "  ['O', 51724, 'Y', 88, 15, 3], ['S', 58529, 'N', 1108, 0, 9], ['P', 53983, 'N', 2117, 1, 9],\n",
       "  ['O', 44294, 'Y', 3195, 9, 20], ['O', 43608, 'Y', 452, 2, 20], ['O', 44072, 'Y', 1250, 5, 5],\n",
       "  ['O', 51385, 'N', 777, 14, 10], ['P', 47111, 'Y', 1001, 1, 14], ['O', 49866, 'N', 2493, 10, 24],\n",
       "  ['O', 43593, 'N', 2315, 13, 0], ['O', 45715, 'N', 772, 8, 14], ['P', 43795, 'Y', 1171, 17, 5],\n",
       "  ['P', 43650, 'N', 267, 8, 12], ['O', 51383, 'N', 1119, 19, 12], ['S', 52540, 'Y', 397, 0, 15],\n",
       "  ['O', 45813, 'Y', 59, 10, 13], ['P', 43908, 'N', 4242, 18, 15], ['O', 44052, 'Y', 375, 13, 5],\n",
       "  ['P', 44193, 'N', 260, 18, 3], ['P', 45115, 'N', 5189, 11, 13], ['O', 58505, 'N', 668, 11, 9],\n",
       "  ['P', 51945, 'Y', 25, 19, 0], ['O', 52896, 'Y', 1655, 19, 6], ['O', 54603, 'N', 1562, 8, 30],\n",
       "  ['O', 48511, 'N', 793, 21, 25], ['P', 44997, 'N', 1238, 6, 18], ['O', 44617, 'Y', 154, 4, 10],\n",
       "  ['O', 43482, 'N', 361, 4, 1], ['L', 58026, 'Y', 6156, 17, 13], ['O', 53791, 'Y', 1844, 1, 15],\n",
       "  ['P', 45066, 'Y', 860, 16, 15], ['O', 43890, 'N', 505, 19, 18], ['O', 53201, 'N', 17134, 18, 29],\n",
       "  ['P', 45869, 'Y', 71, 21, 8], ['P', 47026, 'N', 1368, 23, 18], ['O', 46645, 'N', 884, 19, 4],\n",
       "  ['O', 45970, 'N', 579, 11, 7], ['P', 45659, 'N', 9466, 12, 17], ['O', 53365, 'Y', 3819, 21, 26],\n",
       "  ['S', 47734, 'N', 2631, 23, 6], ['P', 55777, 'Y', 453, 1, 11], ['P', 44095, 'N', 368, 13, 4],\n",
       "  ['O', 43408, 'N', 1106, 10, 4], ['O', 45159, 'N', 2310, 6, 12], ['O', 48931, 'N', 652, 11, 19],\n",
       "  ['O', 45081, 'N', 713, 14, 15], ['L', 45721, 'N', 294, 3, 14], ['P', 44477, 'N', 351, 19, 15],\n",
       "  ['L', 55390, 'N', 812, 23, 3], ['P', 50445, 'Y', 237, 10, 8], ['S', 43677, 'N', 740, 16, 9],\n",
       "  ['O', 44039, 'Y', 109, 17, 6], ['P', 56470, 'Y', 390, 31, 15], ['P', 54777, 'N', 2814, 26, 17],\n",
       "  ['O', 44597, 'N', 468, 10, 12], ['O', 44270, 'N', 962, 3, 22], ['O', 53307, 'N', 1984, 8, 27],\n",
       "  ['P', 43977, 'N', 4763, 14, 12], ['O', 55140, 'N', 5095, 20, 13], ['P', 46501, 'N', 327, 5, 5],\n",
       "  ['O', 45368, 'N', 711, 4, 2], ['P', 46119, 'Y', 104, 1, 6], ['O', 45217, 'N', 445, 17, 8],\n",
       "  ['O', 49789, 'N', 44, 2, 4], ['O', 44306, 'Y', 7995, 15, 19], ['L', 43185, 'N', 20, 0, 8],\n",
       "  ['O', 50816, 'Y', 2031, 0, 17], ['P', 54451, 'N', 3312, 14, 30], ['O', 45452, 'N', 5490, 12, 24],\n",
       "  ['P', 43151, 'N', 681, 6, 9], ['O', 50552, 'Y', 466, 5, 23], ['O', 48607, 'N', 985, 19, 23]]\n",
       "};\n",
       "\n",
       "// Call Code to Build the system ///////////////////////////////////////////////////////////////////\n",
       "\n",
       "var v  = new BrunelVis('visid79c75bbc-deba-11e8-b568-ce419921e9d1');\n",
       "v.build(table1);\n",
       "\n",
       "    });\n",
       "});"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import brunel\n",
    "df = merged.toPandas()\n",
    "%brunel data('df') bar x(Residence) y(Income) mean(CCDebt) color(MortgageDefault) stack tooltip(Income) | x(YearCurrentAddress) y(YearsCurrentEmployer) point color(MortgageDefault) tooltip(YearCurrentAddress, YearsCurrentEmployer) :: width=1100, height=400 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "pixiedust": {
     "displayParams": {
      "aggregation": "AVG",
      "chartsize": "75",
      "charttype": "grouped",
      "clusterby": "AppliedOnline",
      "handlerId": "barChart",
      "keyFields": "MortgageDefault",
      "legend": "false",
      "rowCount": "500",
      "title": "Average Sale Price by Mortgage Default & Application Channel",
      "valueFields": "SalePrice"
     }
    }
   },
   "outputs": [],
   "source": [
    "from pixiedust.display import *\n",
    "display(merged)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Step 5: Build the Spark pipeline and the Random Forest model\n",
    "\"Pipeline\" is an API in SparkML that's used for building models.\n",
    "Additional information on SparkML: https://spark.apache.org/docs/2.0.2/ml-guide.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "from pyspark.ml.feature import StringIndexer, VectorIndexer\n",
    "from pyspark.ml import Pipeline\n",
    "from pyspark.ml.feature import VectorAssembler\n",
    "from pyspark.ml.classification import RandomForestClassifier\n",
    "\n",
    "# Prepare string variables so that they can be used by the algorithm\n",
    "stringIndexer1 = StringIndexer(inputCol='AppliedOnline', outputCol='AppliedOnlineEncoded')\n",
    "stringIndexer2 = StringIndexer(inputCol='Residence',outputCol='ResidenceEncoded')\n",
    "stringIndexer3 = StringIndexer(inputCol='MortgageDefault', outputCol='label')\n",
    "\n",
    "# Instanciate the algorithm\n",
    "rf=RandomForestClassifier(labelCol=\"label\", featuresCol=\"features\")\n",
    "\n",
    "\n",
    "# Pipelines API requires that input variables are passed in  a vector\n",
    "assembler = VectorAssembler(inputCols=[\"Income\", \"AppliedOnlineEncoded\", \"ResidenceEncoded\", \"YearCurrentAddress\", \"YearsCurrentEmployer\", \"NumberOfCards\", \\\n",
    "                                       \"CCDebt\", \"Loans\", \"LoanAmount\", \"SalePrice\", \"Location\"], outputCol=\"features\")\n",
    "\n",
    "pipeline = Pipeline(stages=[stringIndexer1, stringIndexer2, stringIndexer3, assembler, rf])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "# Split data into train and test datasets\n",
    "train, test = merged.randomSplit([80.0,20.0], seed=6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "# Build model based upon the pipeline defined in the above cell\n",
    "model = pipeline.fit(train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Step 6: Score the test data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Income</th>\n",
       "      <th>AppliedOnline</th>\n",
       "      <th>Residence</th>\n",
       "      <th>YearCurrentAddress</th>\n",
       "      <th>YearsCurrentEmployer</th>\n",
       "      <th>NumberOfCards</th>\n",
       "      <th>CCDebt</th>\n",
       "      <th>Loans</th>\n",
       "      <th>LoanAmount</th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>Location</th>\n",
       "      <th>MortgageDefault</th>\n",
       "      <th>AppliedOnlineEncoded</th>\n",
       "      <th>ResidenceEncoded</th>\n",
       "      <th>label</th>\n",
       "      <th>features</th>\n",
       "      <th>rawPrediction</th>\n",
       "      <th>probability</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>100282</td>\n",
       "      <td>45715</td>\n",
       "      <td>Y</td>\n",
       "      <td>O</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>772</td>\n",
       "      <td>1</td>\n",
       "      <td>12985</td>\n",
       "      <td>137000</td>\n",
       "      <td>100</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[45715.0, 0.0, 0.0, 8.0, 14.0, 2.0, 772.0, 1.0...</td>\n",
       "      <td>[16.36755712368833, 3.6324428763116674]</td>\n",
       "      <td>[0.8183778561844166, 0.1816221438155834]</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>100284</td>\n",
       "      <td>45049</td>\n",
       "      <td>Y</td>\n",
       "      <td>P</td>\n",
       "      <td>6</td>\n",
       "      <td>16</td>\n",
       "      <td>2</td>\n",
       "      <td>1345</td>\n",
       "      <td>1</td>\n",
       "      <td>9085</td>\n",
       "      <td>280000</td>\n",
       "      <td>110</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[45049.0, 0.0, 1.0, 6.0, 16.0, 2.0, 1345.0, 1....</td>\n",
       "      <td>[9.240368299158618, 10.75963170084138]</td>\n",
       "      <td>[0.4620184149579309, 0.537981585042069]</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100285</td>\n",
       "      <td>44974</td>\n",
       "      <td>Y</td>\n",
       "      <td>P</td>\n",
       "      <td>14</td>\n",
       "      <td>18</td>\n",
       "      <td>2</td>\n",
       "      <td>2772</td>\n",
       "      <td>0</td>\n",
       "      <td>9515</td>\n",
       "      <td>264000</td>\n",
       "      <td>130</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>[44974.0, 0.0, 1.0, 14.0, 18.0, 2.0, 2772.0, 0...</td>\n",
       "      <td>[10.084639136815953, 9.915360863184047]</td>\n",
       "      <td>[0.5042319568407977, 0.4957680431592023]</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       ID  Income AppliedOnline Residence  YearCurrentAddress  \\\n",
       "0  100282   45715             Y         O                   8   \n",
       "1  100284   45049             Y         P                   6   \n",
       "2  100285   44974             Y         P                  14   \n",
       "\n",
       "   YearsCurrentEmployer  NumberOfCards  CCDebt  Loans  LoanAmount  SalePrice  \\\n",
       "0                    14              2     772      1       12985     137000   \n",
       "1                    16              2    1345      1        9085     280000   \n",
       "2                    18              2    2772      0        9515     264000   \n",
       "\n",
       "   Location MortgageDefault  AppliedOnlineEncoded  ResidenceEncoded  label  \\\n",
       "0       100               N                   0.0               0.0    0.0   \n",
       "1       110               N                   0.0               1.0    0.0   \n",
       "2       130               N                   0.0               1.0    0.0   \n",
       "\n",
       "                                            features  \\\n",
       "0  [45715.0, 0.0, 0.0, 8.0, 14.0, 2.0, 772.0, 1.0...   \n",
       "1  [45049.0, 0.0, 1.0, 6.0, 16.0, 2.0, 1345.0, 1....   \n",
       "2  [44974.0, 0.0, 1.0, 14.0, 18.0, 2.0, 2772.0, 0...   \n",
       "\n",
       "                             rawPrediction  \\\n",
       "0  [16.36755712368833, 3.6324428763116674]   \n",
       "1   [9.240368299158618, 10.75963170084138]   \n",
       "2  [10.084639136815953, 9.915360863184047]   \n",
       "\n",
       "                                probability  prediction  \n",
       "0  [0.8183778561844166, 0.1816221438155834]         0.0  \n",
       "1   [0.4620184149579309, 0.537981585042069]         1.0  \n",
       "2  [0.5042319568407977, 0.4957680431592023]         0.0  "
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = model.transform(test)\n",
    "results.toPandas().head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Step 7: Model Evaluation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision model1 = 0.68.\n"
     ]
    }
   ],
   "source": [
    "print 'Precision model1 = {:.2f}.'.format(results.filter(results.label == results.prediction).count() / float(results.count()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area under ROC curve = 0.68.\n"
     ]
    }
   ],
   "source": [
    "from pyspark.ml.evaluation import BinaryClassificationEvaluator\n",
    "\n",
    "# Evaluate model\n",
    "evaluator = BinaryClassificationEvaluator(rawPredictionCol=\"prediction\", labelCol=\"label\", metricName=\"areaUnderROC\")\n",
    "print 'Area under ROC curve = {:.2f}.'.format(evaluator.evaluate(results))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy = 0.676587\n"
     ]
    }
   ],
   "source": [
    "evaluatorRF = BinaryClassificationEvaluator(labelCol=\"label\", rawPredictionCol=\"prediction\", metricName=\"areaUnderROC\")\n",
    "accuracy = evaluatorRF.evaluate(results)\n",
    "\n",
    "print(\"Accuracy = %g\" % accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Step 8: Save Model in ML repository\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "source": [
    "from dsx_ml.ml import save\n",
    "\n",
    "model_name = \"Predict Mortgage Default LOS\"\n",
    "save(name = model_name,\n",
    "     model = model,\n",
    "     algorithm_type = 'Classification',\n",
    "     test_data = test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Summary:\n",
    "You are now at the end of this notebook and should have successfully:\n",
    "- Performed basic data preparation on the loaded data\n",
    "- Explored the data graphically\n",
    "- Build a Spark Model in the form of a pipeline\n",
    "- Evaluated the model for accuracy levels\n",
    "- Stored the model into the IBM ML environment, making it ready for deployment"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python2.7 with DSX Spark 2.0.2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}